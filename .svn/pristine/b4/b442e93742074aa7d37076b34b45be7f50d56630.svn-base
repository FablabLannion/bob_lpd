#include <Servo.h>
#include <NewPing.h>

/** 
* On utilise des #define plutôt que des variables sur les constantes
* cela prend moins de place en mémoire vive !! (car remplacées lors de la complilation)
*/

#define BuzzerPin 13

#define red 12
#define yellow 11
#define green 10

#define EnableServo 14  // activation des servos (la pin 14 est en faite la pin A0)
Servo Lleg;  // create servo object to control a servo 
Servo Rleg;
Servo Lfoot;
Servo Rfoot;

int RFcenter = 105;    // variable to store the center servo position 
int LLcenter = 73;
int RLcenter = 103;
int LFcenter = 94;
int tAngle = 30; //tilt angle
int uAngle = 35; //turn angle
int sAngle = 35; //swing angle

long cm;                // variable pour stocker la distance de l'objet en cm
// Maximum distance we want to ping for (in centimeters). Maximum sensor distance is rated at 400-500cm.
#define MAX_DISTANCE 300
// Arduino pin tied to trigger pin on the ultrasonic sensor.
#define TRIGGER_PIN  3
// Arduino pin tied to echo pin on the ultrasonic sensor.
#define ECHO_PIN     2
NewPing sonar(TRIGGER_PIN, ECHO_PIN, MAX_DISTANCE); // NewPing setup of pins and maximum distance.
int Obstacle=0;

void setup(){
  Lleg.attach(5);  // attaches the servo on pin x to the servo object 
  Rleg.attach(6);  // attaches the servo on pin x to the servo object 
  Lfoot.attach(4);  // attaches the servo on pin x to the servo object 
  Rfoot.attach(7);  // attaches the servo on pin x to the servo object 
  CenterServos(); //center the servos
  
  pinMode(green, OUTPUT);	digitalWrite(green, LOW);
  pinMode(yellow, OUTPUT);	digitalWrite(yellow, LOW);
  pinMode(red, OUTPUT);		digitalWrite(red, LOW);
  
  pinMode(BuzzerPin, OUTPUT);	digitalWrite(BuzzerPin, LOW);
  //Buzzer.PlayMelody();
  
  Serial.begin(19200);
  Serial.println("Ready");
 

  //while (digitalRead(ButtonPin) != LOW){ 
    //do nothing until the button pressed
  //}
  BuzzerBeep();
  for(int i=0;i<5;++i){
    delay(1000);
  }
  BuzzerBeep();
}

void loop() { 
  Obstacle = testSonar();
  switch (Obstacle){
    case 0: //no object
       Forward(1,30); //one step Forward
       BuzzerBeep();
       break;
     case 1: //object on Left
       TurnRight(2,30);
       BuzzerBeep();
       break;
     case 2: //object on Right
       TurnLeft(2,30);
       BuzzerBeep();
       break;
     case 3: //obect in Front (both Left and Right detect the object)
       TurnLeft(4,30); //turn around
       BuzzerBeep();
       break;
   }
  
}

//La fonction ci-dessous fait clignoter la LED correspondant à la distance.
//Le clignotement est de plus en plus rapide à mesure que l'objet se rapproche.
void blink(int pause, int ledPin) {
  pause = pause * 10;
  digitalWrite(ledPin, HIGH);
  delay(pause);
  digitalWrite(ledPin, LOW);
  delay(10);
}

// on envoi 5 pings, on récupère la moyenne
// puis on converti ça en cm
// voir ici pour la doc des méthodes utilisées
// http://code.google.com/p/arduino-new-ping/wiki/Using_NewPing_Syntax
int testSonar() {
  cm = sonar.convert_cm( sonar.ping_median() ); // send ping and get distance in cm
  Serial.print(cm);
  Serial.print("\t");
  if(cm >0 && cm < 10) {          // objet très proche
    blink(cm, red);
    return 3;
  }
  else if(cm >= 10 && cm < 30) {  // distance moyenne
     blink(cm, yellow);
     return 2;
  }
  else if(cm >= 30) {             // objet lointain
    blink(cm, green);
    return 0;
  }

  Serial.print(Obstacle);
  Serial.print("\t");
}

void CenterServos() { 
    Lleg.write(LLcenter);
    // tell servo to go to position in variable 'center' 
    Rleg.write(RLcenter);
    // tell servo to go to position in variable 'center' 
    Lfoot.write(LFcenter);
    // tell servo to go to position in variable 'center' 
    Rfoot.write(RFcenter);
    // tell servo to go to position in variable 'center' 
    delay(100);
    // waits 100ms for the servos to reach the position 
}

void BuzzerBeep(){
    digitalWrite(BuzzerPin, HIGH);
    delay(100);
    digitalWrite(BuzzerPin, LOW);
}
